// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract MyToken {

    // public variables here
    string public tokenName = "EPSILON";
    string public tokenAbbr = "EON";
    uint public totalSupply = 0;

    // mapping variable here
    mapping (address => uint) public balances;

    // owner variable here
    address public owner;

    // for making owner to the msg.sender
    constructor() {
        owner = msg.sender;
    }

    // modifier funcion use to modify the mint and burn function to be accessed only by the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // mint function 
    function mint(address _address, uint _value) public onlyOwner {
        totalSupply += _value;
        balances[_address] += _value;
    }

    // burn function
    function burn(address _address, uint _value) public onlyOwner {
        if (balances[_address] >= _value){
            totalSupply -= _value;
            balances[_address] -= _value;
        }
    }
}
